# -*- coding: utf-8 -*-
"""HousePricedataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LaNZ6n0iNJTK8w_q1FsDl1b8mQ155_n1
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings

from lightgbm import LGBMRegressor
from lightgbm import LGBMClassifier
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.exceptions import ConvergenceWarning
from sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet
from sklearn.neighbors import KNeighborsRegressor
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVR
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeRegressor
from xgboost import XGBRegressor
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import mean_squared_error
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split, cross_val_score,GridSearchCV
from sklearn.metrics import r2_score
from sklearn.model_selection import cross_validate, GridSearchCV
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, VotingClassifier, AdaBoostClassifier
from sklearn.tree import DecisionTreeRegressor

pip install catboost

pip install matplotlib --upgrade

test_data_path=r'houseprice_test.csv'
train_data_path=r'houseprice_train.csv'

test_data=pd.read_csv("houseprice_test.csv")
train_data=pd.read_csv("houseprice_train.csv")

train_data.head()

test_data.head()

train_data.columns

test_data.columns

train_data.shape

test_data.shape

train_data.info()

test_data.info()

train_data.describe().T

def missing_value(df):
    missing_values = df.isnull().sum()
    for i, satir in missing_values.items():
        if satir != 0:
            print(f"{satir} {i}")

print("########### TRAIN_DATA  ###########" )
missing_value(train_data)
print("########### TEST_DATA   ##########")
missing_value(test_data)

sns.set_theme()
sns.set(rc={"figure.dpi" : 300})
sns.set(rc={"figure.figsize": (8,4)})

sns.histplot(train_data['SalePrice'],kde=True, color='b', bins=30)
plt.title('Distribution of SalePrice')
plt.xlabel('SalePrice')
plt.ylabel('Count')
plt.show()

#çarpıklık (skewness) ve basıklık (kurtosis) özellikleri
print("Skewness: %f" % train_data['SalePrice'].skew())
print("Kurtosis: %f" % train_data['SalePrice'].kurt())

median = train_data["SalePrice"].median()
median

mean = train_data["SalePrice"].mean()
mean

plt.plot([median, mean], [0, 1], marker="o", label="Median ve Mean")
sns.set(rc={"figure.figsize": (6,4)})
plt.xlabel("Değer")
plt.ylabel("Sıklık")
plt.legend()

list(set(train_data.dtypes.tolist()))

df_num = train_data.select_dtypes(include = ['float64','int64'])

df_num.head()

df_num.isnull().sum()

correlation_matrix=df_num.corr()

plt.figure(figsize=(40,15))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.6)
plt.title('Correlation')
plt.show

categorical_features = train_data.select_dtypes(include=['object']).columns
for feature in categorical_features:
    plt.figure(figsize=(20,6))
    sns.boxplot(x=feature, y='SalePrice', data=train_data)
    plt.title(f'SalePrice vs {feature}')
    plt.xticks(rotation=45)
    plt.show()

plt.figure(figsize=(15, 9))
sns.histplot(x='LotArea', y='SalePrice', data=train_data, bins=50, cmap='coolwarm')
plt.title('SalePrice vs LotArea')
plt.xlabel('LotArea')
plt.ylabel('SalePrice')
plt.show()

#Değişkenleri birleştirme işlemi
df=train_data.append(test_data, ignore_index= False).reset_index()

df=df.drop("index",axis=1)

df.head()

df.shape

# NUMERİK VE KATEGORİK DEĞİŞKENLERİN YAKALANMASI
def grab_col_names(dataframe, cat_th=10, car_th=20):


    cat_cols = [col for col in dataframe.columns if dataframe[col].dtypes == "O"]

    num_but_cat = [col for col in dataframe.columns if dataframe[col].nunique() < cat_th and
                   dataframe[col].dtypes != "O"]

    cat_but_car = [col for col in dataframe.columns if dataframe[col].nunique() > car_th and
                   dataframe[col].dtypes == "O"]

    cat_cols = cat_cols + num_but_cat
    cat_cols = [col for col in cat_cols if col not in cat_but_car]

    num_cols = [col for col in dataframe.columns if dataframe[col].dtypes != "O"]
    num_cols = [col for col in num_cols if col not in num_but_cat]

    print(f"Observations: {dataframe.shape[0]}")
    print(f"Variables: {dataframe.shape[1]}")
    print(f'cat_cols: {len(cat_cols)}')
    print(f'num_cols: {len(num_cols)}')
    print(f'cat_but_car: {len(cat_but_car)}')
    print(f'num_but_cat: {len(num_but_cat)}')



    return cat_cols, cat_but_car, num_cols
cat_cols,cat_but_car, num_cols=grab_col_names(df)

#Kategorik Değişken Analizi

def cat_summary (dataframe, col_name,plot=False):
  print(pd.DataFrame({col_name: dataframe[col_name].value_counts(),
                      "Ratio":100*dataframe[col_name].value_counts()/len(dataframe)}))

  if plot:
    sns.countplot(x=dataframe[col_name], data=dataframe)
    plt.show()

for col in cat_cols:
    cat_summary(df,col)

#Sayısal değişken analizi
def num_summary(dataframe, numerical_col, plot=False):
    quantiles = [0.05, 0.10, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70, 0.80, 0.90, 0.95, 0.99]
    print(dataframe[numerical_col].describe(quantiles).T)

    if plot:
        dataframe[numerical_col].hist(bins=50)
        plt.xlabel(numerical_col)
        plt.title(numerical_col)
        plt.show()

    print("#####################################")


for col in num_cols:
    num_summary(df, col, True)

#Target Analysis

def target_summary_with_cat(dataframe, target, categorical_col):
  print(pd.DataFrame({"Target_mean": dataframe.groupby(categorical_col)[target].mean()}), end="\n\n\n")

for col in cat_cols:
  target_summary_with_cat(df,"SalePrice",col)

def target_summary_with_cat(dataframe, target, categorical_col):
    # Hedef değişkenin ortalamasını, kategorik değişkene göre hesapla
    target_means = dataframe.groupby(categorical_col)[target].mean()

    # Hedef değişkenin ortalamasını gösteren bir DataFrame oluştur
    target_means_df = pd.DataFrame({"Target_mean": target_means})

    # Pasta grafiği oluştur
    plt.figure(figsize=(8, 6))
    plt.pie(target_means, labels=target_means.index, autopct="%1.1f%%")
    plt.title(f"{target.upper()} Ortalamaları - {categorical_col.upper()}")
    plt.show()

    # Hedef değişkenin ortalamasını gösteren DataFrame'i yazdır
    print(target_means_df, end="\n\n\n")

# Fonksiyonu tüm kategorik değişkenler için çalıştır
for col in cat_cols:
    target_summary_with_cat(df, "SalePrice", col)

# Korelasyonların gösterilmesi

corr = df[num_cols].corr()
corr

sns.set(rc={'figure.figsize': (20, 12)})
sns.heatmap(corr,annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.6)
plt.show()

#yüksek korelasyonlu değişkenler
def high_correlated_cols(dataframe, plot=False, corr_th=0.70):
    corr = dataframe.corr()
    cor_matrix = corr.abs()
    upper_triangle_matrix = cor_matrix.where(np.triu(np.ones(cor_matrix.shape), k=1).astype(np.bool))
    drop_list = [col for col in upper_triangle_matrix.columns if any(upper_triangle_matrix[col] > corr_th)]
    if plot:
        import seaborn as sns
        import matplotlib.pyplot as plt
        sns.set(rc={'figure.figsize': (15, 15)})
        sns.heatmap(corr, cmap="RdBu")
        plt.show()
    return drop_list

high_correlated_cols(df, plot=False)

# Aykırı Değer Analizi


# Aykırı değerlerin baskılanması
def outlier_thresholds(dataframe, variable, low_quantile=0.10, up_quantile=0.90):
    quantile_one = dataframe[variable].quantile(low_quantile)
    quantile_three = dataframe[variable].quantile(up_quantile)
    interquantile_range = quantile_three - quantile_one
    up_limit = quantile_three + 1.5 * interquantile_range
    low_limit = quantile_one - 1.5 * interquantile_range
    return low_limit, up_limit

def check_outlier(dataframe, col_name):
    low_limit, up_limit = outlier_thresholds(dataframe, col_name)
    if dataframe[(dataframe[col_name] > up_limit) | (dataframe[col_name] < low_limit)].any(axis=None):
        return True
    else:
        return False

for col in num_cols:
  if col !="SalePrice":
    print(col ,check_outlier(df,col))

def replace(dataframe, variable):
    low_limit, up_limit = outlier_thresholds(dataframe, variable)
    dataframe.loc[(dataframe[variable] < low_limit), variable] = low_limit
    dataframe.loc[(dataframe[variable] > up_limit), variable] = up_limit

for col in num_cols:
    if col != "SalePrice":
        replace(df,col)

for col in num_cols:
  if col !="SalePrice":
    print(col ,check_outlier(df,col))

######################################
# Eksik Değer Analizi
######################################


def missing_values(dataframe, na_name=False):
    na_columns = [col for col in dataframe.columns if dataframe[col].isnull().sum() > 0]

    n_miss = dataframe[na_columns].isnull().sum().sort_values(ascending=False)

    ratio = (dataframe[na_columns].isnull().sum() / dataframe.shape[0] * 100).sort_values(ascending=False)

    missing_df = pd.concat([n_miss, np.round(ratio, 2)], axis=1, keys=['n_miss', 'ratio'])

    print(missing_df, end="\n")

    if na_name:
        return na_columns

missing_values(df)

no_cols = ["Alley","BsmtQual","BsmtCond","BsmtExposure","BsmtFinType1","BsmtFinType2","FireplaceQu",
           "GarageType","GarageFinish","GarageQual","GarageCond","PoolQC","Fence","MiscFeature"]

for col in no_cols:
  df[col].fillna("No", inplace=True)

missing_values(df)

#eksik değerleri mod,medyan ve ortalama ile doldurmak.
def quick_missing_imp(data, num_method="median", cat_length=20, target="SalePrice"):
    variables_with_na = [col for col in data.columns if data[col].isnull().sum() > 0]  # Eksik değere sahip olan değişkenler listelenir

    temp_target = data[target]

    print("# BEFORE")
    print(data[variables_with_na].isnull().sum(), "\n\n")  # Uygulama öncesi değişkenlerin eksik değerlerinin sayısı

    # değişken object ve sınıf sayısı cat_lengthe eşit veya altındaysa boş değerleri mode ile doldur
    data = data.apply(lambda x: x.fillna(x.mode()[0]) if (x.dtype == "O" and len(x.unique()) <= cat_length) else x, axis=0)

    # num_method mean ise tipi object olmayan değişkenlerin boş değerleri ortalama ile dolduruluyor
    if num_method == "mean":
        data = data.apply(lambda x: x.fillna(x.mean()) if x.dtype != "O" else x, axis=0)
    # num_method median ise tipi object olmayan değişkenlerin boş değerleri median ile dolduruluyor
    elif num_method == "median":
        data = data.apply(lambda x: x.fillna(x.median()) if x.dtype != "O" else x, axis=0)

    data[target] = temp_target

    print("# AFTER \n Imputation method is 'MODE' for categorical variables!")
    print(" Imputation method is '" + num_method.upper() + "' for numeric variables! \n")
    print(data[variables_with_na].isnull().sum(), "\n\n")

    return data

df = quick_missing_imp(df, num_method="median", cat_length=17)

df["SalePrice"].fillna(df["SalePrice"].median(), inplace=True)

df["SalePrice"].isnull().sum()

df.drop(["Id"],axis=1, inplace=True)

label_encoders = {}
for column in df.select_dtypes(include=['object']).columns:
    label_encoders[column] = LabelEncoder()
    df[column] = label_encoders[column].fit_transform(df[column])

df.head()

X= df.drop(["SalePrice"], axis=1)
y= df["SalePrice"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=26)

rf_model= RandomForestRegressor()

rmse = np.mean(np.sqrt(-cross_val_score(rf_model, X ,y ,cv=5, scoring="neg_mean_squared_error")))

print(rmse)

#Feature Extraction
df["New_YearsBR"] = df["YearRemodAdd"] - df["YearBuilt"]

df["NEW_TotalFlrSF"] = df["1stFlrSF"] + df["2ndFlrSF"]

df["NEW_TotalHouseArea"] = df["NEW_TotalFlrSF"] + df["TotalBsmtSF"]

df["New_Area"] = df["GrLivArea"] + df["GarageArea"]

df["New_Overall"] = df["OverallCond"]* df["OverallQual"]

df["New_RoofQuality"] = df["RoofStyle"] + df["RoofMatl"]

df["New_ExterQual"] = df["ExterQual"] + df["ExterCond"]

df["NEW_TotalBath"]=df["BsmtFullBath"] + df["BsmtHalfBath"] + df["FullBath"] + df["HalfBath"]

df["New_GarageQuality"] = df["GarageQual"] + df["GarageCond"]

df["New_RmsLiveArea"] = df["TotRmsAbvGrd"] + df["GrLivArea"]

df["TotalQual"] = df[["OverallQual", "OverallCond", "ExterQual", "ExterCond", "BsmtCond", "BsmtFinType1",
                      "BsmtFinType2", "HeatingQC", "KitchenQual", "Functional", "FireplaceQu", "GarageQual", "GarageCond", "Fence"]].sum(axis = 1)

df.head()

drop_list=["Street", "Alley", "Neighborhood","PoolQC","Heating","LandSlope","Utilities","LandContour"]

df.drop(drop_list, axis=1 , inplace=True)

df.head()

# MODELLEME #

train_df=df[df['SalePrice'].notnull()]
test_df=df[df['SalePrice'].isnull()]

y=train_df['SalePrice']

X=train_df.drop(["SalePrice"],axis=1)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=26)

models = [('LR', LinearRegression()),
          ('KNN', KNeighborsRegressor()),
          ('RF', RandomForestRegressor()),
          ('GBM',GradientBoostingRegressor()),
          ('XGBoost', XGBRegressor(objective='reg:squarederror')),
          ("CART", DecisionTreeRegressor()),
          ("LightGBM", LGBMRegressor())]

for name, regressor in models:
    rmse = np.mean(np.sqrt(-cross_val_score(regressor, X ,y ,cv=5, scoring="neg_mean_squared_error")))
    print(f"RMSE: {round(rmse, 4)} ({name})")

model_rf = RandomForestRegressor(random_state=26)

model_rf.get_params()

rf_params={"max_depth":[12,13,14],
          "max_features":[3,4,5],
          "n_estimators":[200,250],
          "min_samples_split":[3,4,5]}

best_grid=GridSearchCV(model_rf,rf_params,cv=5 ,n_jobs=-1,verbose=True).fit(X,y)

best_grid.best_params_

rf_final=model_rf.set_params(**best_grid.best_params_, random_state=26).fit(X,y)

rmse = np.mean(np.sqrt(-cross_val_score(rf_final, X, y, cv=5, scoring="neg_mean_squared_error")))

print(rmse)